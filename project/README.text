README:

Maman 14: Final Project (system programming lab Openu CS course)
Done by Miri Bookman && Yocheved Weiser.
Date: 21.03.2023

Task Summary: Create an assembler for fictional assembly language defined by the openu course.

Implementation Overview and general approach:

Objectives (Goals):

1.	Efficiency in memory: It was important to allocate memory dynamically and make its size fit exactly as 	required for each specific memory image output of the program.

2.	Separation of concern: we tried to split the program to independent components that will be responsible for well defined tasks and that the sharing of data between files will be through some kind of encapsulation method such as state getters/setters and scoping global variable to be static so that they will be scoped to the single file that they belong to.

3.	Abstraction of data structures and variable use to fit our needs by defining different typedef structs 	types enums and constants.

Directory structure:
1.	assembler - main function definition, argv & argc processing, single file processing.
2.	preassembler - The preassembler file contains an implementation of a data structure called MacroList, 		which is used for managing macros. The file includes functions for managing the list such as adding, 		searching, and freeing memory. In addition, the code includes functions for processing strings and 		commands in the source code.
3.	first_pass - .contains functions for processing a single line in the first pass and a code line in the 		first pass.
4.	second_pass- contains a function for processing a single line in the second pass and replacing the 		symbol by its address.
5.	text_correctness - contains useful functions.
6.	globals - contains type and constant definitions.
7.	errors- contains all the correctness checks of the code.

Our implementation Overview in short:

Stages:

1) Macros stage:
The assembler parses the original source (.as) file and generates the expanded (.am) source file that contains the same source code content, the only difference is that the macros defined in the original source file (.as) are replaced with their content. In order to do so the assembler uses a Macro list to store the macro name with its starting and ending indexes of its content. If it finds any errors in the syntax of the macros it yield relevant error messages and jumps straight to Next, else, it continues to the First Run stage, but if there were any other errors the program stops and doesn't continue to the first pass.

2) First pass:
In the first run the assembler counts the size of the data image and the instruction image (without allocating any memory), it adds all the symbols to the symbol table, and last but not least the assembler will verify that there are no errors in code before it moves on to step 3. If the assembler encounters any errors in the code it outputs an error/warning message to the stderr screen. In order to report all errors that apear in the source code in the first run, the assembler parses all the content of the source code regardless of any occurrence of an error. If any error (warnings do not count as errors) occurred, the assembler will not continue to stage 3 but it will go straight on to the Next stage.

3) Second pass:
If the first run ended successfully the assembler will update the address of the symbols in the right coding spot, then it will allocate the exact amount of memory it needs to write for the target image (binary of compiled code) then it will reset the counters (IC/DC) and continue to the second run.
In the second run our assembler writes the words of each line of code in binary format, it is inserting the words (binary bits) to the memory image in the correct position depending on the type of word (data/instruction) and it adds each external operand that appeared to the correct spot in the external operands table.

If the assembler encounters a label operand that is not within the symbol table and is not external it prints an error message, and then continues to check the rest of the code in order to discover all errors of this kind and reports them (it is the only kind of error that can appear in second run stage since any other type of error has already been reported in the previous stages by now and has already prevented the assembler from entering the second run stage) and in this case the assembler will finish second run but will not export any files.

4)Export (generate files):
If the second run finished without any errors, we will generate all of the required outputs (.ob, .ext .ent files).

Next:
The assembler then moves on to handle the next source file (means that it will repeat over these 4 steps for each source file passed to it) until the last one, then it ends the program.



